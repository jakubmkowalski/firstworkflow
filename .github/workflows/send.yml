name: Trigger and Wait for Artifact

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to run tests from'
        required: true
        default: 'main'

jobs:
  prepare-and-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare environment
        run: |
          # Add commands to prepare your environment here
          echo "Environment prepared"

      - name: Trigger Second Workflow
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          branch_name="${{ github.event.inputs.branch_name }}"
          echo "Triggering the second workflow on branch $branch_name..."
          curl -X POST -H "Authorization: token $GH_TOKEN" \
               -H "Accept: application/vnd.github.everest-preview+json" \
               https://api.github.com/repos/jakubmkowalski/secondworkflow/dispatches \
               -d "{\"event_type\":\"start_regression_tests\",\"client_payload\":{\"run_id\":\"${{ github.run_id }}\",\"branch\":\"$branch_name\"}}"
          echo "Second workflow triggered successfully."
      
      # - name: Wait for Artifact
      #   id: wait_for_artifact
      #   run: |
      #     branch_name="${{ github.event.inputs.branch_name }}"
      #     artifact_name="desired_artifact_name"
      #     run_id=""
      #     artifact_url=""
      #     for i in {1..3}; do
      #       response=$(curl -H "Accept: application/vnd.github.v3+json" \
      #                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #                      https://api.github.com/repos/jakubmkowalski/secondworkflow/actions/runs)
      #       run_id=$(echo $response | jq -r ".workflow_runs[] | select(.head_branch == \"$branch_name\") | .id" | head -n 1)
      #       artifact_url=$(curl -H "Accept: application/vnd.github.v3+json" \
      #                          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #                          https://api.github.com/repos/jakubmkowalski/secondworkflow/actions/runs/$run_id/artifacts | \
      #                          jq -r ".artifacts[] | select(.name == \"$artifact_name\") | .archive_download_url")
      #       if [ -n "$artifact_url" ]; then
      #         echo "Artifact found: $artifact_url"
      #         break
      #       fi
      #       echo "Artifact not found, waiting..."
      #       sleep 30
      #     done
          
      #     if [ -z "$artifact_url" ]; then
      #       echo "Artifact not found after waiting."
      #     fi
          
      #     echo "::set-output name=artifact_url::$artifact_url"

      - name: Wait for 3 minutes before checking for results
        run: sleep 20

      - name: Check for workflow completion status every 10 seconds for up to 1 minute
        run: |
          success=false
          for i in {1..6}; do
            # Fetch the list of artifacts from the target repository
            artifact_data=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
                      https://api.github.com/repos/jakubmkowalski/secondworklow/actions/artifacts)

            # Check if an artifact containing the RUN_ID exists
            artifact_name=$(echo "$artifact_data" | jq -r '.artifacts[] | select(.name | contains("success_main")) | .name')
            
            if [[ -n "$artifact_name" ]]; then
              echo "Artifact found: $artifact_name"
              success=true
              break
            fi

            echo "Waiting for workflow completion..."
            sleep 10
          done

          if [[ "$success" == "true" ]]; then
            echo "The regression tests completed successfully."
          else
            echo "We couldn't determine the workflow's final status. No artifact found."
            exit 1
          fi

          # Parse the artifact name into components
          status=$(echo "$artifact_name" | cut -d'_' -f1)
          run_id=$(echo "$artifact_name" | cut -d'_' -f2)
          triggering_run_id=$(echo "$artifact_name" | cut -d'_' -f3)

          # Output the parsed values
          echo "Status: $status"
          echo "Run ID: $run_id"
          echo "Triggering Run ID: $triggering_run_id"